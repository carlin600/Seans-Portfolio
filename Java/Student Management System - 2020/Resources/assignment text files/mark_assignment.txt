package Assignment_Student_Management;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.*;

public class Mark_Assignment extends JFrame implements ActionListener {

	private JLabel lblHeader, lblMark, lblDisplay, lblResultID, lblAssignment, lblStudent, lblGrade, lblFeedback, lblStudentDetails, lblAssignmentDetails;
	private JTextField txtResult, txtFeedback,txtAssignment,txtGrade,txtMark;
	private JTextArea taAssignmentDetails, taStudentDetails,taDisplay;
	private JComboBox cmbAssignment, cmbStudent;
	private JButton btnExit, btnReset, btnSubmit, btnSelect;
	private JPanel centre, pnlDisplay;
	private DefaultComboBoxModel[] options = new DefaultComboBoxModel[10];
	private JScrollPane spDisplay;
	private boolean valid;
	private int resultID;
	
	
	
	
	private TreeMap<Integer, _Assignment> assignments;
	private TreeMap<Integer, _Course> courses;
	private TreeMap<Integer, _Module> modules;
	private TreeMap<Integer, _Result> results;
	private TreeMap<Integer, _Student> students;


	
	Mark_Assignment(TreeMap<Integer, _Assignment> assignmentsIn, TreeMap<Integer, _Course> coursesIn, TreeMap<Integer, _Module> modulesIn, 
			TreeMap<Integer, _Result> resultsIn, TreeMap<Integer, _Student> studentsIn)
	{
		
		assignments = assignmentsIn;
		courses = coursesIn;
		modules = modulesIn;
		results = resultsIn;
		students = studentsIn;
		
		//Jlabels
		lblHeader = new JLabel("Mark Assignment", JLabel.CENTER);
		lblHeader.setFont(new Font("Calibri", Font.BOLD, 20));
		lblDisplay = new JLabel("Displaying Assignments", JLabel.CENTER);
		lblDisplay.setFont(new Font("Calibri", Font.BOLD, 20));
		lblResultID = new JLabel("Result ID: ", JLabel.LEFT);
		lblResultID.setFont(new Font("Calibri", Font.BOLD, 16));
		lblAssignment = new JLabel("Select Assignment: ", JLabel.LEFT);
		lblAssignment.setFont(new Font("Calibri", Font.BOLD, 16));
		lblStudent = new JLabel("Select Student:  ", JLabel.LEFT);
		lblStudent.setFont(new Font("Calibri", Font.BOLD, 16));
		lblGrade = new JLabel("Set Grade: ", JLabel.LEFT);
		lblGrade.setFont(new Font("Calibri", Font.BOLD, 16));
		lblMark = new JLabel("Set Mark: ", JLabel.LEFT);
		lblMark.setFont(new Font("Calibri", Font.BOLD, 16));
		lblFeedback = new JLabel("Feedback: ", JLabel.LEFT);
		lblFeedback.setFont(new Font("Calibri", Font.BOLD, 16));
		lblStudentDetails = new JLabel("Student Details", JLabel.CENTER);
		lblStudentDetails.setFont(new Font("Calibri", Font.BOLD, 16));
		lblAssignmentDetails = new JLabel("Assignment Details", JLabel.CENTER);
		lblAssignmentDetails.setFont(new Font("Calibri", Font.BOLD, 16));
		
		//JTextboxes
		txtResult = new JTextField(10);
		txtResult.setEditable(false);
		txtFeedback = new JTextField(30);
		txtAssignment = new JTextField(10);
		txtGrade = new JTextField(10);
		txtGrade.setText("Automatically Assigned.");
		txtGrade.setEditable(false);
		txtMark = new JTextField(10);
		
		//JButtons
		btnExit = new JButton("Exit");
		btnExit.setFont(new Font("Calibri", Font.BOLD, 16));
		btnExit.addActionListener(this);
		btnReset = new JButton("Reset");
		btnReset.setFont(new Font("Calibri", Font.BOLD, 16));
		btnReset.addActionListener(this);
		btnSubmit = new JButton("Submit");
		btnSubmit.setFont(new Font("Calibri", Font.BOLD, 16));
		btnSubmit.addActionListener(this);
		btnSelect = new JButton("Select");
		btnSelect.setFont(new Font("Calibri", Font.BOLD, 16));
		btnSelect.addActionListener(this);
		
		//JTextArea
		taAssignmentDetails = new JTextArea(12,30);
		taAssignmentDetails.setEditable(false);
		taStudentDetails = new JTextArea(12,30);
		taStudentDetails.setEditable(false);
		taDisplay = new JTextArea(12,30);
		taDisplay.setEditable(false);
				
		//JScrollPane
		spDisplay = new JScrollPane(taDisplay);
		spDisplay.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
				

		
		ArrayList<_Student>studentArray = new ArrayList<_Student>();
		Set<Map.Entry<Integer, _Student>> studentstored = students.entrySet();
		
		for(Map.Entry<Integer, _Student> studentsStored : studentstored)
		{
			studentArray.add(studentsStored.getValue());
		}
		
	
		
		
		//JComboBoxes
		options[0] = new DefaultComboBoxModel(new String[] {"- Select Grade - ", "Distinction","Merit","Pass","Fail"});


		cmbStudent = new JComboBox(studentArray.toArray());
		cmbStudent.addActionListener(this);
		

		//autogen Results ID
		//resultID = results.lastEntry().getValue().getResultID() + 1;
		//txtResult.setText(Integer.toString(resultID));
		
		
		Container main = getContentPane();
		main.setLayout(new GridBagLayout());
		main.setBackground(Color.CYAN);
		
		centre = new JPanel();
		centre.setLayout(new GridBagLayout());
		centre.setBackground(Color.CYAN);
		
		pnlDisplay = new JPanel();
		pnlDisplay.setLayout(new BorderLayout());
		pnlDisplay.setBackground(Color.cyan);
		pnlDisplay.add(spDisplay);
		
		addComp(centre,					main		,1,1,1,1,1,1);
		addComp(lblHeader,				centre		,1,1,4,1,1,1);
		addComp(lblResultID,			centre		,1,2,1,1,1,1);
		addComp(txtResult,				centre		,2,2,1,1,1,1);
		addComp(btnSelect,				centre		,3,3,1,1,1,1);
		addComp(lblAssignment,			centre		,1,3,1,1,1,1);
		addComp(txtAssignment,			centre		,2,3,1,1,1,1);
		addComp(lblStudent,				centre		,1,4,1,1,1,1);
		addComp(cmbStudent,				centre		,2,4,1,1,1,1);
		addComp(lblMark,				centre		,1,5,1,1,1,1);
		addComp(txtMark,				centre		,2,5,1,1,1,1);
		addComp(lblGrade,				centre		,1,6,1,1,1,1);
		addComp(txtGrade,				centre		,2,6,1,1,1,1);
		addComp(lblFeedback,			centre		,1,7,1,1,1,1);
		addComp(txtFeedback,			centre		,2,7,1,1,1,1);
		addComp(lblStudentDetails,		centre		,1,8,1,1,1,1);
		addComp(taStudentDetails,		centre		,1,9,1,5,1,1);
		addComp(lblAssignmentDetails,	centre		,2,8,1,1,1,1);
		addComp(taAssignmentDetails,	centre		,2,9,1,5,1,1);
		addComp(lblDisplay,				centre		,3,5,2,1,1,1);
		addComp(pnlDisplay,				centre		,3,6,2,6,1,1);
		addComp(btnExit,				centre		,1,15,1,1,1,1);
		addComp(btnReset,				centre		,2,15,1,1,1,1);
		addComp(btnSubmit,				centre		,3,15,2,1,1,1);
		

		displayAssignments();
	}
	
	private void addComp(Component c, Container main, int gridX, int gridY, int width, int height, int weightX, int weightY)
	{
		GridBagConstraints gc = new GridBagConstraints(); //creates constraints object gc
		gc.fill = GridBagConstraints.BOTH;
		gc.insets = new Insets(8,8,8,8);
		gc.gridx = gridX;
		gc.gridy = gridY;
		gc.gridwidth = width;
		gc.gridheight = height;
		gc.weightx = weightX;
		gc.weighty = weightY;
		
		getContentPane().add(c, gc); //adds components to the gridbag
	}
	
	public void displayAssignments()
	{
		ArrayList<_Assignment>assignmentArray = new ArrayList<_Assignment>();
		Set<Map.Entry<Integer, _Assignment>> assignmentstored = assignments.entrySet();
		
		for(Map.Entry<Integer, _Assignment> assignmentsStored : assignmentstored)
		{
			assignmentArray.add(assignmentsStored.getValue());
			taDisplay.append("" + assignmentsStored.getValue().toString());
		}
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
		if (e.getSource() == btnExit) {
			int option = JOptionPane.showConfirmDialog(null, "Are you sure you wish to Exit?", "Warning", JOptionPane.YES_NO_OPTION);
			
			if( option == JOptionPane.YES_OPTION)
			{
				this.setVisible(false);
			}
			
		}


		if (e.getSource() == btnReset) {
			valid = false;
			
			txtFeedback.setText("");
			txtResult.setText("");
			taAssignmentDetails.setText("");
			taStudentDetails.setText("");
			cmbAssignment.setSelectedIndex(0);
			cmbStudent.setSelectedIndex(0);
			txtGrade.setText("");
			txtMark.setText("");
			JOptionPane.showMessageDialog(null,  "Form Reset!", "Confirmation!", JOptionPane.OK_OPTION);

		}
		
		if(e.getSource() == btnSelect)
		{
			_Assignment getAssignment = new _Assignment();
			getAssignment = assignments.get(Integer.parseInt(txtAssignment.getText().toString()));
			taAssignmentDetails.append(getAssignment.toDetails());
		}
		
		if(e.getSource() == cmbStudent)
		{
			//taStudentDetails.append(cmbStudent.getSelectedItem());
		}
		
		if(e.getSource() == txtMark)
		{
			//taStudentDetails.append(cmbStudent.getSelectedItem());
			txtGrade.setText("i work");
		}
		
		//auto assign grade whenever marks out of 100 entered
		
		
	}

}
